<?php

class ListingController extends Controller
{
	/**
	 * @var string the default layout for the views. Defaults to '//layouts/column2', meaning
	 * using two-column layout. See 'protected/views/layouts/column2.php'.
	 */
	public $layout='//layouts/column2';

	/**
	 * @return array action filters
	 */
	public function filters()
	{
		return array(
			'accessControl', // perform access control for CRUD operations
			'postOnly + delete', // we only allow deletion via POST request
		);
	}

	/**
	 * Specifies the access control rules.
	 * This method is used by the 'accessControl' filter.
	 * @return array access control rules
	 */
	public function accessRules()
	{
		return array(
			array('allow',  // allow all users to perform 'index' and 'view' actions
				'actions'=>array(''),
				'users'=>array('*'),
			),
			array('allow', // allow authenticated user to perform 'create' and 'update' actions
				'actions'=>array('create','update','index','view','delete','user_listing_step2','user_listing_step4','imageupload'),
				'users'=>array('@'),
			),
			array('allow', // allow admin user to perform 'admin' and 'delete' actions
				'actions'=>array('admin','delete'),
				'users'=>array('admin'),
			),
			array('deny',  // deny all users
				'users'=>array('*'),
			),
		);
	}

	/**
	 * Displays a particular model.
	 * @param integer $id the ID of the model to be displayed
	 */
	public function actionView($id)
	{
		$this->render('view',array(
			'model'=>$this->loadModel($id),
		));
	}

	/**
	 * Creates a new model.
	 * If creation is successful, the browser will be redirected to the 'view' page.
	 */
	public function actionCreate()
	{
	     $model = new Userlisting; 
        
        if(isset($_POST['Userlisting']))
		{
			$model->attributes=$_POST['Userlisting'];
			$model->drg_uid = Yii::app()->user->getState('uid');
            if($model->save())
			{	
			     //$this->redirect(array('user_listing_step2',));
                 $this->redirect(Yii::app()->createUrl('listing/user_listing_step2/listid/'.$model->drg_lid));
            }
		} 
		$this->render('create',array('model'=>$model,));
	}
    
     
    
    public function actionUser_listing_step2(){
         
        
        $id = Yii::app()->request->getParam('listid');         
        
        $model = Userlisting::model()->find("drg_uid = '".Yii::app()->user->getState('uid')."' and  drg_lid ='".$id."'");  
              
        $this->render('user_listing_step2',array('model'=>$model,));
       
    }
	
	public function actionUser_listing_step4(){
         
        
        $id = Yii::app()->request->getParam('listid');         
        
        $model = Userlisting::model()->find("drg_uid = '".Yii::app()->user->getState('uid')."' and  drg_lid ='".$id."'");  
              
        $this->render('user_listing_step4',array('model'=>$model,));
       
    }

    public function actionImageupload(){  
        
        Yii::import("ext.EAjaxUpload.qqFileUploader"); 
         
        
        $thumb = 'upload/users/'.Yii::app()->user->getState('ufolder').'/listing/thumb/';// folder for uploaded files
                
        if (!file_exists($thumb)) {
		  mkdir($thumb, 0777, true);
        }
        
        $videos = 'upload/users/'.Yii::app()->user->getState('ufolder').'/videos';// folder for uploaded files
                
        if (!file_exists($videos)) {
		  mkdir($videos, 0777, true);
        }
        
        $big = 'upload/users/'.Yii::app()->user->getState('ufolder').'/listing/big/';// folder for uploaded files
                
        if (!file_exists($big)) {
		  mkdir($big, 0777, true);
        }
        
        $folder = 'upload/users/'.Yii::app()->user->getState('ufolder').'/images/';// folder for uploaded files
                
        if (!file_exists($folder)) {
		  mkdir($folder, 0777, true);
        }
 
        
        $allowedExtensions = array("jpg",'png','gif');//array("jpg","jpeg","gif","exe","mov" and etc...
        
        $sizeLimit = 10 * 1024 * 1024;// maximum file size in bytes
        
        $uploader = new qqFileUploader($allowedExtensions, $sizeLimit);
        
               
        $result = $uploader->handleUpload($big);
        
        //$uploader->handleUpload($thumb);
        
        $return = htmlspecialchars(json_encode($result), ENT_NOQUOTES);
 
        $fileSize = filesize($big.$result['filename']);//GETTING FILE SIZE
        
        $fileName = $result['filename'];//GETTING FILE NAME   
        
        echo $return;// it's array
        
            
    }

	/**
	 * Updates a particular model.
	 * If update is successful, the browser will be redirected to the 'view' page.
	 * @param integer $id the ID of the model to be updated
	 */
	public function actionUpdate($id)
	{
		$model=$this->loadModel($id);
        
        $model1 = Userlisting::model()->find("drg_uid = '".Yii::app()->user->getState('uid')."'");
		// Uncomment the following line if AJAX validation is needed
		// $this->performAjaxValidation($model);

		if(isset($_POST['Userlisting']))
		{
			$model->attributes=$_POST['Userlisting'];
            $model->drg_uid = Yii::app()->user->getState('uid');
			if($model->save())
			{
			      $this->redirect(array('user_listing_step2'));
			}	
            //$this->redirect(array('view','id'=>$model->drg_lid));
		}

		$this->render('create',array(
			'model'=>$model1,
		));
	}

	/**
	 * Deletes a particular model.
	 * If deletion is successful, the browser will be redirected to the 'admin' page.
	 * @param integer $id the ID of the model to be deleted
	 */
	public function actionDelete($id)
	{
		$this->loadModel($id)->delete();

		// if AJAX request (triggered by deletion via admin grid view), we should not redirect the browser
		if(!isset($_GET['ajax']))
			$this->redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('admin'));
	}

	/**
	 * Lists all models.
	 */
	public function actionIndex()
	{ 	 
		/*$model->unsetAttributes();  // clear any default values
		if(isset($_GET['Userlisting']))
			$model->attributes=$_GET['Userlisting'];

		$this->render('index',array(
			'model'=>$model,
		));*/
         $model= new Userlisting('search'); 
        $criteria = new CDbCriteria;
        //$criteria->compare('drg_uid',Yii::app()->user->getState('uid'),true); 
        $criteria->order = 'drg_lid desc';
        $total = Userlisting::model()->count($criteria);
        $pages = new CPagination($total);
        $pages->setPageSize(Yii::app()->params['listPerPage']);
        $pages->applyLimit($criteria);  // the trick is here!
		$posts = Userlisting::model()->findAll($criteria);
        
       $this->render('index',array('model'=>$model,
		'list'=>$posts,
		'pages' => $pages,
		'item_count'=>$total,
		'page_size'=>Yii::app()->params['listPerPage'],)) ;
	}

	/**
	 * Manages all models.
	 */
	public function actionAdmin()
	{
		$model=new Userlisting('search');
		$model->unsetAttributes();  // clear any default values
		if(isset($_GET['Userlisting']))
			$model->attributes=$_GET['Userlisting'];

		$this->render('admin',array(
			'model'=>$model,
		));
	}

	/**
	 * Returns the data model based on the primary key given in the GET variable.
	 * If the data model is not found, an HTTP exception will be raised.
	 * @param integer $id the ID of the model to be loaded
	 * @return Userlisting the loaded model
	 * @throws CHttpException
	 */
	public function loadModel($id)
	{
		$model=Userlisting::model()->findByPk($id);
		if($model===null)
			throw new CHttpException(404,'The requested page does not exist.');
		return $model;
	}

	/**
	 * Performs the AJAX validation.
	 * @param Userlisting $model the model to be validated
	 */
	protected function performAjaxValidation($model)
	{
		if(isset($_POST['ajax']) && $_POST['ajax']==='userlisting-form')
		{
			echo CActiveForm::validate($model);
			Yii::app()->end();
		}
	}
}
